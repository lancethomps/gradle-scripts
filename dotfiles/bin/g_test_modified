#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.command_defaults.sh
source "${_SCRIPT_DIR}/.command_defaults.sh" || exit 1
##################################################################################################################################################

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--cd-to-git-base-dir] [--all] [--origin] [<gradle_arg>...]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME}
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --all)
      all=true
      shift
      ;;
    --cd-to-git-base-dir)
      cd_to_git_base_dir=true
      shift
      ;;
    --origin)
      origin=true
      shift
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

declare -x modified_tests=() modified_projects=()

function pull_modified_tests() {
  local git_args=(modified-tests) modified_tests_files all_projects test_file test_name proj

  if check_true "${all-}"; then
    local def_branch

    def_branch="$(git default-branch)"
    if check_true "${origin-}"; then
      def_branch="origin/$def_branch"
    fi

    git_args+=("${def_branch}")
  fi

  mapfile -t modified_tests_files < <(git "${git_args[@]}")

  if test "${#modified_tests_files[@]}" -eq 0; then
    echo "No modified tests found"
    if check_true "${all-}"; then
      if check_true "${origin-}"; then
        exit 1
      fi

      echo "Trying again with origin=true..."
      export origin=true
      pull_modified_tests
      return $?
    fi

    echo "Trying again with all=true..."
    export all=true
    pull_modified_tests
    return $?
  fi

  mapfile -t all_projects < <("${_SCRIPT_DIR}/g_projects_names")

  for test_file in "${modified_tests_files[@]}"; do
    test_name="$(basename "$test_file" | cut -f 1 -d '.')"
    modified_tests+=("$test_name")

    for proj in "${all_projects[@]}"; do
      if [[ $test_file == "${proj}/"* ]]; then
        if ! is_arg_present "$proj" "${modified_projects[@]}"; then
          modified_projects+=("$proj")
        fi
        break
      fi
    done
  done
}

function main() {
  local gradle_args=() modified_project modified_test

  cd_to_git_base_dir_if_needed

  if ! check_true "${all-}" && git is-clean; then
    all=true
  fi

  pull_modified_tests

  if test "${#modified_projects[@]}" -eq 0; then
    gradle_args+=(test)
  else
    for modified_project in "${modified_projects[@]}"; do
      gradle_args+=(":${modified_project}:test")
    done
  fi

  for modified_test in "${modified_tests[@]}"; do
    gradle_args+=(--tests "$modified_test")
  done

  gradle_args+=("${PASSTHROUGH_ARGS[@]}")

  log_and_run g "${gradle_args[@]}"
}

main "${PASSTHROUGH_ARGS[@]}"
