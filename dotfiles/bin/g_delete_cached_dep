#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.common_copy.sh
source "${_SCRIPT_DIR}/.common_copy.sh" || exit 1
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

if test -z "${1-}"; then
  exit_fatal "Usage: $(basename "$0") <group:name>"
fi

function main() {
  local dep_ids=("$@") dep_id dep_paths=() find_args found_dirs
  find_args=(
    -Ls "${HOME}/.gradle/caches/modules-2"
    -type d
  )

  for dep_id in "${dep_ids[@]}"; do
    if test "${#dep_paths[@]}" -ne 0; then
      dep_paths+=(-or)
    fi
    dep_paths+=(-path "*${dep_id//:/\/}")
  done

  find_args+=(
    \(
    "${dep_paths[@]}"
    \)
  )

  mapfile -d $'\0' -t found_dirs < <(find "${find_args[@]}" -print0)
  if test "${#found_dirs[@]}" -eq 0; then
    echo "No cached dependency directories found"
    exit 1
  fi

  log_with_title_sep "${dep_ids[*]}"
  join_by_newline_with_end "${found_dirs[@]}"
  log_sep
  if confirm_with_auto "Delete above directories?"; then
    log_and_run trash -Fv "${found_dirs[@]}"
  fi

  return 0
}

main "$@"
