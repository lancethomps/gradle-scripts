#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.command_defaults.sh
source "${_SCRIPT_DIR}/.command_defaults.sh" || exit 1
##################################################################################################################################################

profiler="${profiler:-async}"
declare -x profiling_sub_dir profiler_args

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  log_and_run_surround gradle-profiler --help

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--auto-confirm] [--cd-to-git-base-dir] [--keep-existing] [--no-open]
       ${SYNOP_INDENT} [--benchmark] [--include-build-ops] [--profiler <profiler>] [--use-isolated-gradle-user-home]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]
       ${SYNOP_INDENT} [<gradle_profiler_arg>...] <gradle_arg>...

EXAMPLES
       ${_SCRIPT_NAME}
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    --auto-confirm)
      auto_confirm=true
      shift
      ;;
    --benchmark)
      benchmark=true
      profiler=benchmark
      shift
      ;;
    --cd-to-git-base-dir)
      cd_to_git_base_dir=true
      shift
      ;;
    --include-build-ops)
      include_build_ops=true
      shift
      ;;
    --keep-existing)
      keep_existing=true
      shift
      ;;
    --no-open)
      no_open=true
      shift
      ;;
    --profiler)
      shift
      profiler="$1"
      shift
      ;;
    --use-isolated-gradle-user-home)
      use_isolated_gradle_user_home=true
      shift
      ;;
    --)
      shift
      PASSTHROUGH_ARGS+=("$@")
      shift "$#"
      break
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

function is_benchmark() {
  test "${profiler-}" = "benchmark" || check_true "${benchmark-}"
}

function open_files() {
  local open_file

  if check_true "${no_open-}"; then
    return 0
  fi

  if is_benchmark; then
    open_file="${profiling_sub_dir}/benchmark.html"
  elif test "$profiler" = "async"; then
    open_file="${profiling_sub_dir}/7.5.1-cpu-raw-flames.svg"
  else
    return 0
  fi

  if test -e "$open_file"; then
    log_and_run open -a "/Applications/Google Chrome.app" "$open_file"
  else
    log_stderr "File to open does not exist: $open_file"
  fi
}

function get_profiler_args() {
  if test "${profiler-}" = "async"; then
    profiler_args=(
      --profile async-profiler-all
    )
  elif test "${profiler}" = "jprofiler"; then
    profiler_args=(
      --profile jprofiler
      # --jprofiler-config sampling-all
      --jprofiler-config instrumentation
      --jprofiler-probes builtin.FileProbe
    )
  elif test "${profiler}" = "chrome"; then
    profiler_args=(
      --profile chrome-trace
    )
  elif is_benchmark; then
    profiler_args=(
      --benchmark
    )
  else
    exit_fatal_with_usage "profiler not recognized: $profiler"
  fi

  if check_true "${include_build_ops-}"; then
    profiler_args+=(
      --measure-build-op 'org.gradle.api.internal.tasks.SnapshotTaskInputsBuildOperationType'
      --measure-build-op 'org.gradle.configuration.project.ConfigureProjectBuildOperationType'
      --measure-build-op 'org.gradle.initialization.ConfigureBuildBuildOperationType'
    )
  fi

  return 0
}

function main() {
  local g_args task_args=() maybe_task_arg profiling_sub_dir_base gradle_user_home
  cd_to_git_base_dir_if_needed

  for maybe_task_arg in "$@"; do
    if echo "$maybe_task_arg" | pcregrep -q '^(:|[a-zA-Z])'; then
      task_args+=("$maybe_task_arg")
    fi
  done

  if test "${#task_args[@]}" -eq 0; then
    exit_fatal "No task arguments found: $*"
  fi

  get_profiler_args
  profiling_sub_dir_base="${PROFILING_DIR}/gradle-profiler/$(git repo-name)"
  profiling_sub_dir="${profiling_sub_dir_base}/$(join_by '_' "${task_args[@]}")-${profiler}"

  if check_true "${use_isolated_gradle_user_home-}"; then
    gradle_user_home="${profiling_sub_dir_base}/gradle-user-home"
  else
    gradle_user_home="${HOME}/.gradle"
  fi

  if test -e "$profiling_sub_dir" && ! check_true "${keep_existing-}"; then
    if confirm_with_auto "Delete existing profiling dir (${profiling_sub_dir})?"; then
      log_and_run rm -rfv "$profiling_sub_dir"
    fi
  fi

  g_args=(
    "${profiler_args[@]}"
    --measure-config-time
    --gradle-user-home "${gradle_user_home}"
    --output-dir "$profiling_sub_dir"
    --project-dir "$(pwd)"
    "$@"
  )

  if ! is_arg_present --warmups "${g_args[@]}"; then
    if is_benchmark; then
      g_args=(--warmups 3 "${g_args[@]}")
    else
      g_args=(--warmups 1 "${g_args[@]}")
    fi
  fi

  log_and_run gradle-profiler "${g_args[@]}"
  open_files
  mac_play_finished
}

main "${PASSTHROUGH_ARGS[@]}"
